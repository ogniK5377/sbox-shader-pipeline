#ifdef HAS_TEX_SUPPORT
    // CreateInputTexture2D( transformationTexture, linear, 8, "", "", "Transformation Texture", Default3( 1.0, 1.0, 1.0 ) );
    // CreateTexture2DInRegisterWithoutSampler( g_tTransformTexture, 11 )< Channel( RGBA, "None(g_tTransformTexture)", linear ); TexOutputFormat("RGBA32323232F"); Attribute("TransformTexture"); >;
    // CreateSampler2DWithRegister( g_tTransformTexture, 11 )< Filter(MIN_MAG_MIP_POINT); AddressU(WRAP); AddressV(WRAP); AddressW(WRAP); >;
    SamplerState g_tTransformTexture_s : register(s0)< Filter(MIN_MAG_MIP_POINT); AddressU(WRAP); AddressV(WRAP); AddressW(WRAP); >;
    Texture2D<float4> g_tTransformTexture : register(t11)< AsTransformTexture(true); >;
#endif

float3 SrgbGammaToLinear(float3 c) {
    c = max(c, 0);
    return c < 0.04045f ? c * 0.0773993805 : pow(c * 0.9478672986 + 0.0521327014, 2.4);
}

float4 Position4WsToPs(float4 pos) {
    float4 camOffset = g_vWorldToCameraOffset + pos;
    return mul(g_matWorldToProjection, camOffset);
}

float4 Position3WsToPs(float3 pos) {
    return Position4WsToPs(float4(pos.xyz, 1.0f));
}

PsInput VS_SharedStandardProcessing(VsInput i) {
    PsInput o;

    #ifdef HAS_TEX_SUPPORT
        float3 unpacked0 = float3(0,0,0);
        float3 unpacked1 = float3(0,0,0);

        float4 packedTextured = Tex2DLevelOffset(g_tTransformTexture, i.vTexCoord13.xy, 0, int2(0,0)).xyzw;
        float4 basePosition = float4(i.vPosition.xyz, 1.0);

        unpacked0.x = dot(packedTextured, basePosition);
        unpacked1.x = dot(packedTextured.xyz, i.vNormal.xyz);

        packedTextured = Tex2DLevelOffset(g_tTransformTexture, i.vTexCoord13.xy, 0, int2(1,0)).xyzw;
        unpacked0.y = dot(packedTextured.xyzw, basePosition);
        unpacked1.y = dot(packedTextured.xyz, i.vNormal.xyz);

        packedTextured = Tex2DLevelOffset(g_tTransformTexture, i.vTexCoord13.xy, 0, int2(2,0)).xyzw;
        unpacked0.z = dot(packedTextured.xyzw, basePosition);
        unpacked1.z = dot(packedTextured.xyz, i.vNormal.xyz);

        o.vPositionWithOffsetWs.xyz = -g_vHighPrecisionLightingOffsetWs.xyz + unpacked0.xyz;
        float d = rsqrt(dot(unpacked1.xyz, unpacked1.xyz));

        o.vNormalWs.xyz = unpacked1.xyz * d;
    #else
        o.vPositionWithOffsetWs = i.vBaseUvs0;
        o.vNormalWs = i.vUv1;
    #endif

    o.vBaseUv = i.vBaseUvs0;

    float2 rescaledUvs = i.vBaseUvs0.xy * g_vTexCoordScale.xy + g_vTexCoordOffset.xy;
    o.vScrollingCoordinates.xy = g_vTexCoordScrollSpeed.xy * g_flTime + rescaledUvs;

    o.vPosition.xyz = i.vPosition.xyz; // need to pass this for post to handle it
    o.vUv12.xy = i.vTexCoord13.xy; 
    return o;
}

PsInput VS_CommonProcessing_Post(PsInput o) {
#ifdef HAS_TEX_SUPPORT
    float n = Tex2DLevelOffset(g_tTransformTexture, o.vUv12.xy, 0, int2(3, 0)).z;
    o.vUv12.x = (int)n & 0x0000ffff;
    o.vUv12.y = 0;
#endif

    o.vPosition = Position3WsToPs(o.vPosition.xyz);
    return o;
}